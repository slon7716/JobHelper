              // –ü—Ä–∏–≤–ª–∞—Å–Ω—é—î–º–æ –∫–ª–∞—Å 'active' –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
let currentPage = window.location.pathname.split("/").pop(); // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π URL
// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
const navLinks = document.querySelectorAll('.pages a');
// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
navLinks.forEach(link => {
  const linkHref = link.getAttribute('href');
  if (linkHref === currentPage) {
    link.classList.add('active'); // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é
  }
});

              // Swiper
const cardsSwiper = new Swiper('.swiper', {
  speed: 700,
  slidesPerView: 'auto',
  spaceBetween: 16,
  freeMode: true,
  navigation: {
    nextEl: '.swiper-button-next',
    prevEl: '.swiper-button-prev',
  },
});

              // –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è textarea
const textarea = document.getElementById('ideas');
const button = document.querySelector('.feedback .btn');

if (textarea && button) {
  textarea.addEventListener('input', () => {
    if (textarea.value.trim() !== '') {
      button.disabled = false;
    } else {
      button.disabled = true;
    }
  });
}

            // –ü–æ–∫–∞–∑–∞—Ç–∏/–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Å–∏–º–≤–æ–ª–∏ –ø–∞—Ä–æ–ª—é
const toggleButtons = document.querySelectorAll('.toggle-password');
const passwordInputs = document.querySelectorAll('.password, .repeat-password');

toggleButtons.forEach((toggleBtn, index) => {
  const toggleIcon = toggleBtn.querySelector('img');
  const input = passwordInputs[index];

  toggleBtn.addEventListener('mousedown', (e) => {
    e.preventDefault(); // –±–ª–æ–∫—É—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
    if (input.type === 'password') {
      input.type = 'text';
      toggleIcon.src = 'assets/img/eye.svg';
    } else {
      input.type = 'password';
      toggleIcon.src = 'assets/img/eye-grey.svg';
    }
  });
});

  // ---------------------------
  // MOCK fetch –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
  // –í–∏–¥–∞–ª–∏ –∞–±–æ –∑–∞–∫–æ–º–µ–Ω—Ç—É–π —Ü–µ–π –±–ª–æ–∫, –∫–æ–ª–∏ –ø—ñ–¥–∫–ª—é—á–∏—à —Ä–µ–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä.
  // ---------------------------
const mockScenario = 200; // 200 | 400 | 500 ‚Äî —Ç—É—Ç –ø–µ—Ä–µ–º–∏–∫–∞—î—à

window.fetch = async function (url, options) {
  console.log("Mock fetch called:", url, options);
  
  if (mockScenario === 200) {
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π ID –¥–ª—è –∫–∞—Ä—Ç–∫–∏
    return {
      ok: true,
      status: 200,
      json: async () => ({ message: "–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ", })
    };
  }
  
  if (mockScenario === 400) {
    return {
      ok: false,
      status: 400,
      json: async () => ({ message: "–ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–≤ ‚ùå" })
    };
  }
  
  if (mockScenario === 500) {
    return {
      ok: false,
      status: 500,
      json: async () => ({ message: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ üí•" })
    };
  }
}
  // ---------------------------